from flask import Flask
app = Flask(__name__)

@app.route('/alpha')
def alpha():
    return "This is the alpha version"

@app.route('/beta')
def beta():
    return "This is the beta version"

if __name__=='__main__':
    app.run(debug=True)



<!DOCTYPE html>
<html lang="en">

<head>
    <title>My title</title>
</head>

<body>
    <p>Flask </p>
</body>

</html>

from flask import Flask, render_template
app = Flask(__name__)

@app.route('/')
def render():
    return render_template('myfile.html')

if __name__=='__main__':
    app.run(debug=True)

from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/input')
def render():
    if 'filename' in request.args:
        myfilename = request.args.get('filename')
        return render_template(myfilename)
    else:
        return "No input file specified"

if __name__=='__main__':
    app.run(debug=True)


from flask.ext.sqlalchemy import SQLAlchemy
 
app = Flask(__name__)
db = SQLAlchemy(app)
 
 
 
class Todo (db.Model):
    __tablename__ = "todo"
    id = db.Column('id', db.Integer, primary_key=True)
    category_id = db.Column('category_id', db.Integer, db.ForeignKey('category.id'))
    priority_id = db.Column('priority_id', db.Integer, db.ForeignKey('priority.id'))
    description = db.Column('description', db.Unicode)
    creation_date = db.Column('creation_date', db.Date)
    is_done = db.Column('is_done', db.Boolean)
 
    priority = db.relationship('Priority', foreign_keys=priority_id)
    category = db.relationship('Category', foreign_keys=category_id)
 
 
class Priority (db.Model):
   __tablename__ = "priority"
    id = db.Column('id', db.Integer, primary_key=True)
    name = db.Column('name', db.Unicode)
    value = db.Column('value', db.Integer)
 
 
class Category (db.Model):
    __tablename__ = "category"
    id = db.Column('id', db.Integer, primary_key=True)
    name = db.Column('name', db.Unicode)



creation_date = db.Column('creation_date', db.Date, default=datetime.utcnow)
is_done = db.Column('is_done', db.Boolean, default=False)
def __init__(self, category, priority, description):
    self.category = category
    self.priority = priority
    self.description = description
    self.creation_date = datetime.utcnow()
    self.is_done = False

from todoapp import app
from models import d

db.create_all()


from models import Category
work = Category(name=u'work')
home = Category(name=u’home’)
 
db.session.add(work)
db.session.add(home)
db.session.commit()

from models import Priority
 
high = Priority(name=u’high’, value=3)
medium = Priority(name=u’medium’, value=2)
low = Priority(name=u’low’, value=1)
 
db.session.add(high)
db.session.add(medium)
db.session.add(low)
db.session.commit()

from flask import render_template, request
from models import Category, Todo, Priority, db
 
@app.route('/')
def list_all():
   return render_template(
       'list.html',
       categories=Category.query.all(),
       todos=Todo.query.join(Priority).order_by(Priority.value.desc())

@app.route('/new-task', methods=['POST'])
def new():
   if request.method == 'POST':
       category = Category.query.filter_by(id=request.form['category']).first()
       priority = Priority.query.filter_by(id=request.form['priority']).first()
       todo = Todo(category, priority, request.form['description'])
       db.session.add(todo)
       db.session.commit()
       return redirect('/')
   else:
       return render_template(
           'new-task.html',
           page='new-task',
           categories=Category.query.all(),
           priorities=Priority.query.all()
       )

